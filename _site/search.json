[
  {
    "objectID": "renv.html",
    "href": "renv.html",
    "title": "renv",
    "section": "",
    "text": "Overview\n{renv} is a package management tool for R that helps you create isolated and reproducible R environments. It allows you to specify the exact versions of R packages that your project depends on, ensuring that your code runs consistently across different environments.\nWith {renv}, you can create a project-specific library of packages, which are separate from your global R library. This allows you to have different versions of packages for different projects and ensures that your project dependencies are self-contained. {renv} also provides tools for managing and resolving package dependencies, making it easier to collaborate with others and share your code.\nTo use {renv} in your projects, set up the project environment by running renv::init(). This command creates an renv.lock file, which specifies the exact versions of packages needed for the project. Other people can then replicate the environment by running renv::restore() using the renv.lock file.\n\n\nSlides\nOpen the slides in a new tab here.\n\n\n\n\n\nExercise\n\nDownload the renv.lock file here.\n\n\nIf it downloads a file, navigate to your R project in your computer file system and replace the renv.lock file that‚Äôs already there with this new one.\nIf it opens in the web browser, copy all the text and paste over the renv.lock file that‚Äôs already in your R project.\n\n\nIn your R project, run renv::restore().\nInstall a new R package of your choice. (Not sure what to choose? Try one of these fun packages. For example, I did install.packages(\"hadley/emo\").)\nCreate an R script and save it in your R project. Include some code that requires the package. For example:\n\n\nemo::ji(\"banana\")\n\nüçå \n\n\n\nRun renv::status() to make sure your project picked up the package as a dependency.\nRun renv::snapshot() to record that package in your lockfile.\nOpen your lockfile and look for your new package. For example, mine now has:\n\n\"emo\": {\n      \"Package\": \"emo\",\n      \"Version\": \"0.0.0.9000\",\n      \"Source\": \"git\",\n      \"RemoteType\": \"git\",\n      \"RemoteUrl\": \"https://github.com/hadley/emo\",\n      \"RemoteHost\": \"api.github.com\",\n      \"RemoteUsername\": \"hadley\",\n      \"RemoteRepo\": \"emo\",\n      \"RemoteRef\": \"master\",\n      \"RemoteSha\": \"3f03b11491ce3d6fc5601e210927eff73bf8e350\",\n      \"Requirements\": [\n        \"R\",\n        \"assertthat\",\n        \"crayon\",\n        \"glue\",\n        \"lubridate\",\n        \"magrittr\",\n        \"purrr\",\n        \"rlang\",\n        \"stringr\",\n        \"utils\"\n      ],\n      \"Hash\": \"eb32b8f0bb50621ad498f5d836b546a4\"\n    },\n\n\nResources\n\n{renv} documentation"
  },
  {
    "objectID": "gtsummary.html",
    "href": "gtsummary.html",
    "title": "gtsummary",
    "section": "",
    "text": "Overview\n{gtsummary} has become my preferred way of creating tables of all types. It‚Äôs highly customizable and can almost always get the exact output I‚Äôm looking for. It‚Äôs based of the {gt} package for creating tables, so can be even more customizable. It also includes functions for pulling out numbers from the tables to report in the text.\n\n\nSlides\nOpen the slides in a new tab here.\n\n\n\n\n\nExercises\n\nDownload the quarto document here and put it into your R project folder.\nRender the document.\nMake a tbl_summary(). Include (at least) number of hours of sleep on weekdays and weekends, categorical region, and income and make sure they are nicely labeled. Play around with the extra functions from the examples and/or from the documentation\nFit a Poisson regression for the number of siblings, using at least 3 predictors of your choice. Create a nice table displaying your Poisson regression and its exponentiated coefficients.\n\n\n\nResources\n\n{gtsummary} documentation\n{gt} documentation\n{flextable} documentation\n{gtExtras} documentation\nDiscussion here and here about table rendering issues that will be fixed in the next quarto update."
  },
  {
    "objectID": "targets.html",
    "href": "targets.html",
    "title": "targets",
    "section": "",
    "text": "Overview\nThe {targets} R package offers a superior workflow compared to a script-based approach, addressing several common challenges:\n\nManaging a sequence of computational steps : {targets} allows you to define a pipeline of computational steps, specifying the dependencies and relationships between them.\nSelective updates : With {targets}, you only need to update the specific steps affected by a change. It intelligently determines which steps are affected and updates them accordingly, saving time and computational resources.\nEnsuring validity of results : {targets} automatically tracks the relationships between steps and ensures that the results at the end of the pipeline remain valid, even if intermediate steps change.\n\nKey advantages of the {targets} workflow over script-based approaches include:\n\nReproducibility : By explicitly defining dependencies, {targets} ensures that changes in one step trigger the re-evaluation of dependent steps, maintaining reproducibility.\nEfficiency : Instead of rerunning all scripts, {targets} selectively executes only the affected steps, optimizing computational efficiency.\nScalability : {targets} provides a clear overview of dependencies, making it easier to manage and scale complex workflows with numerous scripts.\nSimplified file management : {targets} automatically manages input and output files, removing the burden of manually tracking file dependencies and their locations.\n\n\n\nSlides\nOpen the slides in a new tab here.\n\n\n\n\n\nExercises\n\nDownload a new R project as a zip file (green ‚ÄúCode‚Äù button -&gt; ‚ÄúDownload ZIP‚Äù). (If you are familiar with git/github, feel free to clone it directly.)\nExamine the file structure, the code, the _targets.R file.\nRun tar_make().\nExamine everything again and see what‚Äôs new.\nPut the Poisson regression and table you made earlier into functions and add to the appropriate folders.\nAdd tar_target() calls to _targets.R.\nAdd a code chunk to output the table in my-analysis.qmd.\nRun tar_outdated().\nRun `tar_make().\n\n\n\nResources\n\nThe user manual is a great resource for learning more"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reproducible Epidemiology in R",
    "section": "",
    "text": "June 13, 2023\n\n1-5 pm\n\n\n\nLouisa Smith\nAssistant Professor\nDepartment of Health Sciences, Northeastern University\nl.smith@northeastern.edu"
  },
  {
    "objectID": "quarto.html",
    "href": "quarto.html",
    "title": "quarto",
    "section": "",
    "text": "Overview\nQuarto is an open-source document format and computational notebook system that combines the power of Markdown, code execution, and reproducible research. It allows users to seamlessly integrate code, text, and visualizations within a single document, fostering a dynamic and interactive narrative. Quarto supports multiple programming languages, including R, Python, Julia, and JavaScript, enabling cross-language interoperability. With its intuitive syntax, Quarto makes it easy to create professional-quality reports, presentations, and articles, where code chunks can be executed on-demand and their outputs automatically updated.\n\n\nSlides\nOpen the slides in a new tab here.\n\n\n\n\n\nExercises\n\nIn your R project, create a quarto document. Choose html output for now.\nRender the document using the Render button at the top of the RStudio pane.\nChange to format: docx in the header and re-render.\nChange back to format: html (I find easier to work on this way, can render to Word at the end).\nCreate a code chunk with the following code and render:\n\n\nnlsy &lt;- read.csv(here::here(\"data\", \"nlsy.csv\"))\nhead(nlsy)\n\n  H0012400 H0012500 H0022300 H0022500 R0000100 R0009100 R0173600 R0214700\n1       -4       -4       -4       -4        1        1        5        3\n2        0        1        4        3        2        8        5        3\n3        0        1        5        7        3        3        5        3\n4       -4       -4        9        9        4        3        5        3\n5       -4       -4       -4       -4        5        1        1        3\n6        1        2        6        7        6        1        1        3\n  R0214800 R0216400 R0217900 R0402800 R7090700 T4120500\n1        2        1    30000       -5       -5       -5\n2        2        1    20000       -4       11       34\n3        2        1    22390       11       11       19\n4        2        1    22390       -5       -5       -5\n5        1        1    36000        3       -5       -5\n6        1        1    35000        3       11       30\n\n\n\n\nResources\n\nThe quarto website is an amazing resource\nFeel free to look at the source code of this site\n\nAdditional resources for R Markdown will have a lot of overlap:\n\nThe Definitive Guide to R Markdown\nThe R Markdown Cookbook"
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Workflow",
    "section": "",
    "text": "Overview\nHaving a solid R workflow is incredibly important for efficient and reproducible data analysis. It involves key practices like using R projects, leveraging the {here} package, and restarting the R session regularly. R projects provide a structured and isolated environment, ensuring project-specific settings and fostering collaboration. The {here} package simplifies file path management, boosting code portability across different systems, and saving you from the headaches of dealing with setwd(). Additionally, restarting the R session helps eliminate potential issues and ensures a clean workspace, reducing errors and allowing you to start fresh with your code execution.\n\n\nSlides\nOpen the slides in a new tab here.\n\n\n\n\n\nExercises\n\nCreate an R project for this workshop (you do want to check off ‚ÄúUse renv‚Äù ‚Äì we‚Äôll get to that later)\nInstall the {here} package\nDownload the .csv file at https://raw.githubusercontent.com/louisahsmith/reproducible-epi-workshop-2023/main/data/nlsy.csv\nCreate a data folder within your R project directory and move the nlsy.csv file there.\nRun here::here(\"data\", \"nlsy.csv\") and see what file path prints out. Compare with your neighbor.\nRun read.csv(here::here(\"data\", \"nlsy.csv\")) to make sure your can read in the file.\nRestart the R session to start fresh!\n\n\n\nResources\n\nJenny Bryan‚Äôs blog post: Project-oriented workflow\nAnother blog post by Malcolm Barrett\n{here} package documentation:"
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "NLSY data",
    "section": "",
    "text": "We‚Äôre using some data from the National Longitudinal Survey of Youth 1979, a cohort of American young adults aged 14-22 at enrollment in 1979. They continue to be followed to this day, and there is a wealth of publicly available data online. I‚Äôve downloaded the answers to a survey question about whether respondents wear glasses, a scale about their eyesight with glasses, their (NLSY-assigned üòí) race/ethnicity, their sex (presumably at birth, but unclear), their family‚Äôs income in 1979, and their age at the birth of their first child."
  }
]